@page "/makequickreservation"

@inject IApplicationInsights ApplicationInsights
@using BlazorApplicationInsights.Interfaces
@using BlazorApplicationInsights.Models
@using FluentValidation

<MudCard>
    <MudForm Model="@model" @ref="@form" Validation="@(orderValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudTextField @bind-Value="model.Name"
                          For="@(() => model.Name)"
                          Immediate="true"
                          Label="Name" />

            <MudTextField @bind-Value="model.Email"
                          For="@(() => model.Email)"
                          Immediate="true"
                          Label="Email" />

            <MudTextField @bind-Value="model.CCNumber"
                          For="@(() => model.CCNumber)"
                          Immediate="true"
                          Label="Credit card nr" />

        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Save</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [Inject]
    protected NavigationManager NavigationManager { get; set; }

    protected OrderModel model { get; set; }

    protected OrderModelFluentValidator orderValidator = new OrderModelFluentValidator();

    protected MudForm form;

    protected override void OnInitialized()
    {
        model = new OrderModel();
        ApplicationInsights.StartTrackEvent("MakQuickReservation Valid");
    }


    private async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            await ApplicationInsights.StopTrackEvent("MakQuickReservation Valid");
            NavigationManager.NavigateTo("/");
        }
        else
        {
            await ApplicationInsights.StopTrackEvent("MakQuickReservation Valid", new Dictionary<string, object?>(){{ "invalid", null }});
            await ApplicationInsights.StartTrackEvent("MakQuickReservation Valid");
        }
    }

    public class OrderModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string CCNumber { get; set; } = "4012 8888 8888 1881";
    }


    public class OrderModelFluentValidator : AbstractValidator<OrderModel>
    {
        public OrderModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty()
                .Length(1, 100);

            RuleFor(x => x.Email)
                .Cascade(CascadeMode.Stop)
                .NotEmpty()
                .EmailAddress()
                .MustAsync(async (value, cancellationToken) => await IsUniqueAsync(value));

            RuleFor(x => x.CCNumber)
                .NotEmpty()
                .Length(1, 100)
                .CreditCard();
        }

        private async Task<bool> IsUniqueAsync(string email)
        {
            // Simulates a long running http call
            return email.ToLower() != "test@test.com";
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<OrderModel>.CreateWithOptions((OrderModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }
}
